/* tslint:disable */
/* eslint-disable */
/**
 * My File NYC
 * This api represents a combination of all API Gateway Lambda Proxy components for My File NYC.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: wereid@nycopportunity.nyc.gov
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddCaseApplicantsResponse } from '../models';
import { AddCaseFamilyMembersRequestInner } from '../models';
import { AddCaseFileRequest } from '../models';
import { AddWorkFlowRequest } from '../models';
import { AddWorkFlowResponse } from '../models';
import { CaseApplicant } from '../models';
import { CreateCaseRequestBody } from '../models';
import { CreateCaseResponse } from '../models';
import { CreateFamilyMemberRequest } from '../models';
import { CreateFamilyMemberResponse } from '../models';
import { CreateUserFileRequest } from '../models';
import { CreateUserRequest } from '../models';
import { CreateUserResponse } from '../models';
import { DeleteCaseFileRequest } from '../models';
import { DeleteFamilyMemberResponse } from '../models';
import { DeleteUserFileRequest } from '../models';
import { DeleteWorkFlowRequest } from '../models';
import { DeleteWorkFlowResponse } from '../models';
import { FamilyMember } from '../models';
import { Filters } from '../models';
import { GetCaseResponse } from '../models';
import { GetUserActivityResponse } from '../models';
import { GetUserFileCasesResponse } from '../models';
import { GetUserFilesResponse } from '../models';
import { GetUserWorkFlowsResponse } from '../models';
import { Language } from '../models';
import { UpdateCaseFileRequest } from '../models';
import { UpdateCaseRequestBody } from '../models';
import { UpdateCaseResponse } from '../models';
import { UpdateFamilyMemberRequest } from '../models';
import { UpdateFamilyMemberResponse } from '../models';
import { UpdateGeneratedFileRequest } from '../models';
import { UpdateGeneratedFileResponse } from '../models';
import { UpdateUserRequest } from '../models';
import { UpdateUserResponse } from '../models';
import { User } from '../models';
import { UserFileDownloadResponse } from '../models';
import { Workflow } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add case family members
         * @param {string} caseId 
         * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCaseFamilyMembers: async (caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling addCaseFamilyMembers.');
            }
            const localVarPath = `/case/{caseId}/family-members`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add case files
         * @param {string} caseId 
         * @param {AddCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCaseFiles: async (caseId: string, body?: AddCaseFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling addCaseFiles.');
            }
            const localVarPath = `/cases/{caseId}/files`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add user workflow
         * @param {AddWorkFlowRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserWorkflow: async (body?: AddWorkFlowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new case
         * @param {CreateCaseRequestBody} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase: async (body?: CreateCaseRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user.
         * @param {CreateUserRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (body?: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a user family member
         * @param {CreateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserFamilyMember: async (body?: CreateFamilyMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/family`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user file.
         * @param {CreateUserFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserFile: async (body?: CreateUserFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a case
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase: async (caseId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling deleteCase.');
            }
            const localVarPath = `/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete case family members
         * @param {string} caseId 
         * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseFamilyMembers: async (caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling deleteCaseFamilyMembers.');
            }
            const localVarPath = `/case/{caseId}/family-members`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete case files
         * @param {string} caseId 
         * @param {DeleteCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCaseFiles: async (caseId: string, body?: DeleteCaseFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling deleteCaseFiles.');
            }
            const localVarPath = `/cases/{caseId}/files`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user family members
         * @param {Array<string>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFamilyMember: async (body?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/family`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user file.
         * @param {DeleteUserFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFile: async (body?: DeleteUserFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single case
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase: async (caseId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCase.');
            }
            const localVarPath = `/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get case family members
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFamilyMembers: async (caseId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseFamilyMembers.');
            }
            const localVarPath = `/case/{caseId}/family-members`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get case files
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseFileListing: async (caseId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling getCaseFileListing.');
            }
            const localVarPath = `/cases/{caseId}/files`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user cases
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user family member
         * @param {string} id 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamilyMember: async (id: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFamilyMember.');
            }
            const localVarPath = `/user/family/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user family members
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFamilyMembers: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/family`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get generated file download url
         * @param {string} generatedFileId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneratedFileDownloadUrl: async (generatedFileId: string, userId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generatedFileId' is not null or undefined
            if (generatedFileId === null || generatedFileId === undefined) {
                throw new RequiredError('generatedFileId','Required parameter generatedFileId was null or undefined when calling getGeneratedFileDownloadUrl.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getGeneratedFileDownloadUrl.');
            }
            const localVarPath = `/users/files/generated/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (generatedFileId !== undefined) {
                localVarQueryParameter['generatedFileId'] = generatedFileId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get myfile languages
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguages: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get NYCID user data
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user activity.
         * @param {Filters} filters 
         * @param {number} page 
         * @param {number} limit 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserActivity: async (filters: Filters, page: number, limit: number, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filters' is not null or undefined
            if (filters === null || filters === undefined) {
                throw new RequiredError('filters','Required parameter filters was null or undefined when calling getUserActivity.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getUserActivity.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling getUserActivity.');
            }
            const localVarPath = `/users/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user family member files.
         * @param {string} userFamilyMemberId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFamilyMemberFiles: async (userFamilyMemberId: string, userId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userFamilyMemberId' is not null or undefined
            if (userFamilyMemberId === null || userFamilyMemberId === undefined) {
                throw new RequiredError('userFamilyMemberId','Required parameter userFamilyMemberId was null or undefined when calling getUserFamilyMemberFiles.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserFamilyMemberFiles.');
            }
            const localVarPath = `/users/{userId}/files/family-member`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userFamilyMemberId !== undefined) {
                localVarQueryParameter['userFamilyMemberId'] = userFamilyMemberId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get cases for user file.
         * @param {string} fileId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFileCases: async (fileId: string, userId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getUserFileCases.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserFileCases.');
            }
            const localVarPath = `/users/files/{fileId}/cases`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get download url for user file.
         * @param {string} fileId 
         * @param {string} uploadVersionId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFileDownloadUrl: async (fileId: string, uploadVersionId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getUserFileDownloadUrl.');
            }
            // verify required parameter 'uploadVersionId' is not null or undefined
            if (uploadVersionId === null || uploadVersionId === undefined) {
                throw new RequiredError('uploadVersionId','Required parameter uploadVersionId was null or undefined when calling getUserFileDownloadUrl.');
            }
            const localVarPath = `/users/files/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (uploadVersionId !== undefined) {
                localVarQueryParameter['uploadVersionId'] = uploadVersionId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user files.
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFiles: async (userId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserFiles.');
            }
            const localVarPath = `/users/{userId}/files`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user workflows
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWorkflows: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get myfile workflows
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflows: async (body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Post message to connections
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagingPostMessageToWsConnectionsPost: async (userId: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling messagingPostMessageToWsConnectionsPost.');
            }
            const localVarPath = `/messaging/post-message-to-ws-connections`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove user workflow
         * @param {DeleteWorkFlowRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserWorkflow: async (body?: DeleteWorkFlowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a case
         * @param {string} caseId 
         * @param {UpdateCaseRequestBody} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase: async (caseId: string, body?: UpdateCaseRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            if (caseId === null || caseId === undefined) {
                throw new RequiredError('caseId','Required parameter caseId was null or undefined when calling updateCase.');
            }
            const localVarPath = `/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update case file
         * @param {string} id 
         * @param {UpdateCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCaseFile: async (id: string, body?: UpdateCaseFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCaseFile.');
            }
            const localVarPath = `/cases/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update generated file
         * @param {UpdateGeneratedFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGeneratedFile: async (body?: UpdateGeneratedFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/files/generated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user.
         * @param {string} userId 
         * @param {UpdateUserRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, body?: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUser.');
            }
            const localVarPath = `/users`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user family member
         * @param {UpdateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserFamilyMember: async (body?: UpdateFamilyMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/family`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user file.
         * @param {UpdateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserFile: async (body?: UpdateFamilyMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add case family members
         * @param {string} caseId 
         * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCaseFamilyMembers(caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AddCaseApplicantsResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addCaseFamilyMembers(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add case files
         * @param {string} caseId 
         * @param {AddCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCaseFiles(caseId: string, body?: AddCaseFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addCaseFiles(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add user workflow
         * @param {AddWorkFlowRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserWorkflow(body?: AddWorkFlowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AddWorkFlowResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addUserWorkflow(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new case
         * @param {CreateCaseRequestBody} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCase(body?: CreateCaseRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateCaseResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createCase(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create user.
         * @param {CreateUserRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(body?: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateUserResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a user family member
         * @param {CreateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserFamilyMember(body?: CreateFamilyMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateFamilyMemberResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createUserFamilyMember(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create user file.
         * @param {CreateUserFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserFile(body?: CreateUserFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateUserFileRequest>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createUserFile(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a case
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCase(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCase(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete case family members
         * @param {string} caseId 
         * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCaseFamilyMembers(caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCaseFamilyMembers(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete case files
         * @param {string} caseId 
         * @param {DeleteCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCaseFiles(caseId: string, body?: DeleteCaseFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCaseFiles(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete user family members
         * @param {Array<string>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFamilyMember(body?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteFamilyMemberResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteFamilyMember(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete user
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete user file.
         * @param {DeleteUserFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFile(body?: DeleteUserFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteUserFile(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a single case
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCase(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetCaseResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCase(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get case family members
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseFamilyMembers(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CaseApplicant>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCaseFamilyMembers(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get case files
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseFileListing(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCaseFileListing(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user cases
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCases(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetCaseResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCases(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user family member
         * @param {string} id 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamilyMember(id: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FamilyMember>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFamilyMember(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user family members
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamilyMembers(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FamilyMember>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFamilyMembers(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get generated file download url
         * @param {string} generatedFileId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneratedFileDownloadUrl(generatedFileId: string, userId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserFileDownloadResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getGeneratedFileDownloadUrl(generatedFileId, userId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get myfile languages
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLanguages(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Language>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getLanguages(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get NYCID user data
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user activity.
         * @param {Filters} filters 
         * @param {number} page 
         * @param {number} limit 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserActivity(filters: Filters, page: number, limit: number, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserActivityResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserActivity(filters, page, limit, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user family member files.
         * @param {string} userFamilyMemberId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFamilyMemberFiles(userFamilyMemberId: string, userId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserFilesResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserFamilyMemberFiles(userFamilyMemberId, userId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get cases for user file.
         * @param {string} fileId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFileCases(fileId: string, userId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserFileCasesResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserFileCases(fileId, userId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get download url for user file.
         * @param {string} fileId 
         * @param {string} uploadVersionId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFileDownloadUrl(fileId: string, uploadVersionId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserFileDownloadResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserFileDownloadUrl(fileId, uploadVersionId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user files.
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFiles(userId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserFilesResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserFiles(userId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user workflows
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWorkflows(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetUserWorkFlowsResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserWorkflows(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get myfile workflows
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflows(body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Workflow>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkflows(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Post message to connections
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagingPostMessageToWsConnectionsPost(userId: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).messagingPostMessageToWsConnectionsPost(userId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove user workflow
         * @param {DeleteWorkFlowRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserWorkflow(body?: DeleteWorkFlowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DeleteWorkFlowResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeUserWorkflow(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a case
         * @param {string} caseId 
         * @param {UpdateCaseRequestBody} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCase(caseId: string, body?: UpdateCaseRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateCaseResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateCase(caseId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update case file
         * @param {string} id 
         * @param {UpdateCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCaseFile(id: string, body?: UpdateCaseFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateCaseFile(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update generated file
         * @param {UpdateGeneratedFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGeneratedFile(body?: UpdateGeneratedFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateGeneratedFileResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateGeneratedFile(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update user.
         * @param {string} userId 
         * @param {UpdateUserRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, body?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateUserResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateUser(userId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update user family member
         * @param {UpdateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserFamilyMember(body?: UpdateFamilyMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateFamilyMemberResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateUserFamilyMember(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update user file.
         * @param {UpdateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserFile(body?: UpdateFamilyMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UpdateFamilyMemberResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateUserFile(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add case family members
         * @param {string} caseId 
         * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCaseFamilyMembers(caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options?: AxiosRequestConfig): Promise<AxiosResponse<AddCaseApplicantsResponse>> {
            return DefaultApiFp(configuration).addCaseFamilyMembers(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Add case files
         * @param {string} caseId 
         * @param {AddCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCaseFiles(caseId: string, body?: AddCaseFileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).addCaseFiles(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Add user workflow
         * @param {AddWorkFlowRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserWorkflow(body?: AddWorkFlowRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AddWorkFlowResponse>> {
            return DefaultApiFp(configuration).addUserWorkflow(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new case
         * @param {CreateCaseRequestBody} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCase(body?: CreateCaseRequestBody, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateCaseResponse>> {
            return DefaultApiFp(configuration).createCase(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user.
         * @param {CreateUserRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(body?: CreateUserRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateUserResponse>> {
            return DefaultApiFp(configuration).createUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a user family member
         * @param {CreateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserFamilyMember(body?: CreateFamilyMemberRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateFamilyMemberResponse>> {
            return DefaultApiFp(configuration).createUserFamilyMember(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user file.
         * @param {CreateUserFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserFile(body?: CreateUserFileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateUserFileRequest>> {
            return DefaultApiFp(configuration).createUserFile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a case
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCase(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).deleteCase(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete case family members
         * @param {string} caseId 
         * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCaseFamilyMembers(caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).deleteCaseFamilyMembers(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete case files
         * @param {string} caseId 
         * @param {DeleteCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCaseFiles(caseId: string, body?: DeleteCaseFileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).deleteCaseFiles(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user family members
         * @param {Array<string>} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFamilyMember(body?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteFamilyMemberResponse>> {
            return DefaultApiFp(configuration).deleteFamilyMember(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).deleteUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user file.
         * @param {DeleteUserFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFile(body?: DeleteUserFileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).deleteUserFile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single case
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCase(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetCaseResponse>> {
            return DefaultApiFp(configuration).getCase(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get case family members
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseFamilyMembers(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CaseApplicant>>> {
            return DefaultApiFp(configuration).getCaseFamilyMembers(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get case files
         * @param {string} caseId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseFileListing(caseId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).getCaseFileListing(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user cases
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCases(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetCaseResponse>> {
            return DefaultApiFp(configuration).getCases(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user family member
         * @param {string} id 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamilyMember(id: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<FamilyMember>> {
            return DefaultApiFp(configuration).getFamilyMember(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user family members
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFamilyMembers(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FamilyMember>>> {
            return DefaultApiFp(configuration).getFamilyMembers(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get generated file download url
         * @param {string} generatedFileId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneratedFileDownloadUrl(generatedFileId: string, userId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<UserFileDownloadResponse>> {
            return DefaultApiFp(configuration).getGeneratedFileDownloadUrl(generatedFileId, userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get myfile languages
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLanguages(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Language>>> {
            return DefaultApiFp(configuration).getLanguages(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get NYCID user data
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> {
            return DefaultApiFp(configuration).getUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user activity.
         * @param {Filters} filters 
         * @param {number} page 
         * @param {number} limit 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserActivity(filters: Filters, page: number, limit: number, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserActivityResponse>> {
            return DefaultApiFp(configuration).getUserActivity(filters, page, limit, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user family member files.
         * @param {string} userFamilyMemberId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFamilyMemberFiles(userFamilyMemberId: string, userId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserFilesResponse>> {
            return DefaultApiFp(configuration).getUserFamilyMemberFiles(userFamilyMemberId, userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get cases for user file.
         * @param {string} fileId 
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFileCases(fileId: string, userId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserFileCasesResponse>> {
            return DefaultApiFp(configuration).getUserFileCases(fileId, userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get download url for user file.
         * @param {string} fileId 
         * @param {string} uploadVersionId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFileDownloadUrl(fileId: string, uploadVersionId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<UserFileDownloadResponse>> {
            return DefaultApiFp(configuration).getUserFileDownloadUrl(fileId, uploadVersionId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user files.
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFiles(userId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserFilesResponse>> {
            return DefaultApiFp(configuration).getUserFiles(userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user workflows
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWorkflows(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUserWorkFlowsResponse>> {
            return DefaultApiFp(configuration).getUserWorkflows(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get myfile workflows
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflows(body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Workflow>>> {
            return DefaultApiFp(configuration).getWorkflows(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Post message to connections
         * @param {string} userId 
         * @param {any} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagingPostMessageToWsConnectionsPost(userId: string, body?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).messagingPostMessageToWsConnectionsPost(userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove user workflow
         * @param {DeleteWorkFlowRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserWorkflow(body?: DeleteWorkFlowRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeleteWorkFlowResponse>> {
            return DefaultApiFp(configuration).removeUserWorkflow(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a case
         * @param {string} caseId 
         * @param {UpdateCaseRequestBody} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCase(caseId: string, body?: UpdateCaseRequestBody, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateCaseResponse>> {
            return DefaultApiFp(configuration).updateCase(caseId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update case file
         * @param {string} id 
         * @param {UpdateCaseFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCaseFile(id: string, body?: UpdateCaseFileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).updateCaseFile(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update generated file
         * @param {UpdateGeneratedFileRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGeneratedFile(body?: UpdateGeneratedFileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateGeneratedFileResponse>> {
            return DefaultApiFp(configuration).updateGeneratedFile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user.
         * @param {string} userId 
         * @param {UpdateUserRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, body?: UpdateUserRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateUserResponse>> {
            return DefaultApiFp(configuration).updateUser(userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user family member
         * @param {UpdateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserFamilyMember(body?: UpdateFamilyMemberRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateFamilyMemberResponse>> {
            return DefaultApiFp(configuration).updateUserFamilyMember(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user file.
         * @param {UpdateFamilyMemberRequest} [body] Default response body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserFile(body?: UpdateFamilyMemberRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<UpdateFamilyMemberResponse>> {
            return DefaultApiFp(configuration).updateUserFile(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Add case family members
     * @param {string} caseId 
     * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async addCaseFamilyMembers(caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options?: AxiosRequestConfig) : Promise<AxiosResponse<AddCaseApplicantsResponse>> {
        return DefaultApiFp(this.configuration).addCaseFamilyMembers(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add case files
     * @param {string} caseId 
     * @param {AddCaseFileRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async addCaseFiles(caseId: string, body?: AddCaseFileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).addCaseFiles(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add user workflow
     * @param {AddWorkFlowRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async addUserWorkflow(body?: AddWorkFlowRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<AddWorkFlowResponse>> {
        return DefaultApiFp(this.configuration).addUserWorkflow(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new case
     * @param {CreateCaseRequestBody} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createCase(body?: CreateCaseRequestBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateCaseResponse>> {
        return DefaultApiFp(this.configuration).createCase(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create user.
     * @param {CreateUserRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createUser(body?: CreateUserRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateUserResponse>> {
        return DefaultApiFp(this.configuration).createUser(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a user family member
     * @param {CreateFamilyMemberRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createUserFamilyMember(body?: CreateFamilyMemberRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateFamilyMemberResponse>> {
        return DefaultApiFp(this.configuration).createUserFamilyMember(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create user file.
     * @param {CreateUserFileRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createUserFile(body?: CreateUserFileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateUserFileRequest>> {
        return DefaultApiFp(this.configuration).createUserFile(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a case
     * @param {string} caseId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deleteCase(caseId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).deleteCase(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete case family members
     * @param {string} caseId 
     * @param {Array<AddCaseFamilyMembersRequestInner>} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deleteCaseFamilyMembers(caseId: string, body?: Array<AddCaseFamilyMembersRequestInner>, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).deleteCaseFamilyMembers(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete case files
     * @param {string} caseId 
     * @param {DeleteCaseFileRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deleteCaseFiles(caseId: string, body?: DeleteCaseFileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).deleteCaseFiles(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete user family members
     * @param {Array<string>} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deleteFamilyMember(body?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteFamilyMemberResponse>> {
        return DefaultApiFp(this.configuration).deleteFamilyMember(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete user
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deleteUser(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).deleteUser(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete user file.
     * @param {DeleteUserFileRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deleteUserFile(body?: DeleteUserFileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).deleteUserFile(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a single case
     * @param {string} caseId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getCase(caseId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetCaseResponse>> {
        return DefaultApiFp(this.configuration).getCase(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get case family members
     * @param {string} caseId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getCaseFamilyMembers(caseId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CaseApplicant>>> {
        return DefaultApiFp(this.configuration).getCaseFamilyMembers(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get case files
     * @param {string} caseId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getCaseFileListing(caseId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).getCaseFileListing(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user cases
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getCases(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetCaseResponse>> {
        return DefaultApiFp(this.configuration).getCases(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user family member
     * @param {string} id 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getFamilyMember(id: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<FamilyMember>> {
        return DefaultApiFp(this.configuration).getFamilyMember(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user family members
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getFamilyMembers(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FamilyMember>>> {
        return DefaultApiFp(this.configuration).getFamilyMembers(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get generated file download url
     * @param {string} generatedFileId 
     * @param {string} userId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getGeneratedFileDownloadUrl(generatedFileId: string, userId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserFileDownloadResponse>> {
        return DefaultApiFp(this.configuration).getGeneratedFileDownloadUrl(generatedFileId, userId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get myfile languages
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getLanguages(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Language>>> {
        return DefaultApiFp(this.configuration).getLanguages(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get NYCID user data
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUser(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<User>> {
        return DefaultApiFp(this.configuration).getUser(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user activity.
     * @param {Filters} filters 
     * @param {number} page 
     * @param {number} limit 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUserActivity(filters: Filters, page: number, limit: number, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserActivityResponse>> {
        return DefaultApiFp(this.configuration).getUserActivity(filters, page, limit, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user family member files.
     * @param {string} userFamilyMemberId 
     * @param {string} userId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUserFamilyMemberFiles(userFamilyMemberId: string, userId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserFilesResponse>> {
        return DefaultApiFp(this.configuration).getUserFamilyMemberFiles(userFamilyMemberId, userId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get cases for user file.
     * @param {string} fileId 
     * @param {string} userId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUserFileCases(fileId: string, userId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserFileCasesResponse>> {
        return DefaultApiFp(this.configuration).getUserFileCases(fileId, userId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get download url for user file.
     * @param {string} fileId 
     * @param {string} uploadVersionId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUserFileDownloadUrl(fileId: string, uploadVersionId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserFileDownloadResponse>> {
        return DefaultApiFp(this.configuration).getUserFileDownloadUrl(fileId, uploadVersionId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user files.
     * @param {string} userId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUserFiles(userId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserFilesResponse>> {
        return DefaultApiFp(this.configuration).getUserFiles(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user workflows
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getUserWorkflows(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetUserWorkFlowsResponse>> {
        return DefaultApiFp(this.configuration).getUserWorkflows(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get myfile workflows
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getWorkflows(body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Workflow>>> {
        return DefaultApiFp(this.configuration).getWorkflows(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post message to connections
     * @param {string} userId 
     * @param {any} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async messagingPostMessageToWsConnectionsPost(userId: string, body?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).messagingPostMessageToWsConnectionsPost(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove user workflow
     * @param {DeleteWorkFlowRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async removeUserWorkflow(body?: DeleteWorkFlowRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<DeleteWorkFlowResponse>> {
        return DefaultApiFp(this.configuration).removeUserWorkflow(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a case
     * @param {string} caseId 
     * @param {UpdateCaseRequestBody} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async updateCase(caseId: string, body?: UpdateCaseRequestBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateCaseResponse>> {
        return DefaultApiFp(this.configuration).updateCase(caseId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update case file
     * @param {string} id 
     * @param {UpdateCaseFileRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async updateCaseFile(id: string, body?: UpdateCaseFileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).updateCaseFile(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update generated file
     * @param {UpdateGeneratedFileRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async updateGeneratedFile(body?: UpdateGeneratedFileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateGeneratedFileResponse>> {
        return DefaultApiFp(this.configuration).updateGeneratedFile(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update user.
     * @param {string} userId 
     * @param {UpdateUserRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async updateUser(userId: string, body?: UpdateUserRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateUserResponse>> {
        return DefaultApiFp(this.configuration).updateUser(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update user family member
     * @param {UpdateFamilyMemberRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async updateUserFamilyMember(body?: UpdateFamilyMemberRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateFamilyMemberResponse>> {
        return DefaultApiFp(this.configuration).updateUserFamilyMember(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update user file.
     * @param {UpdateFamilyMemberRequest} [body] Default response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async updateUserFile(body?: UpdateFamilyMemberRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<UpdateFamilyMemberResponse>> {
        return DefaultApiFp(this.configuration).updateUserFile(body, options).then((request) => request(this.axios, this.basePath));
    }
}
