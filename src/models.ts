// This file is auto-generated by @hey-api/openapi-ts


export type Language = {
    id: string;
    Name: string;
    Code: string;
    CreatedAt: string;
};

export type AddCaseFileRequest = {
    UserFileIds: Array<(string)>;
};

export type DeleteCaseFileRequest = {
    UserFileIds: Array<(string)>;
};

export type UpdateCaseFileRequest = {
    Status: string;
};

export type UserFile = {
    id?: string;
    LegacyId?: string;
    ContentType: string;
    ActiveVersionId?: string;
    OriginalFilename: string;
    Title: string;
    CreatedAt?: string;
    LastModifiedAt?: string;
    OwnerUserId?: string;
    UploadedMediaAssetVersions?: Array<unknown>;
    UploadUrls?: Array<(string)>;
    CreatedByUserId?: string;
    LastModifiedByUserId?: string;
    UploadUrl?: string;
};

export type GetUserFilesResponse = Array<UserFile>;

export type CreateUserFileRequest = {
    UserFamilyMemberId?: string;
    Title: string;
    Files: Array<{
        ContentType: string;
        OriginalFilename: string;
        SizeInBytes: number;
        PageNumber: number;
    }>;
};

export type UpdateFamilyMemberRequest = {
    FirstName?: string;
    id: string;
    LastName?: string;
    Dob?: string;
    Relationship?: string;
};

export type User = {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    LegacyId?: string;
    IdpId?: string;
};

export type CaseApplicant = {
    CaseId?: string;
    UserFamilyMemberId?: string;
    UserFamilyMember?: unknown;
    Case?: unknown;
};

export type UpdateFamilyMemberResponse = {
    id: string;
    FirstName?: string;
    LastName?: string;
    UserId?: string;
    DOB?: string;
    Relationship?: string;
    User?: User;
    CaseApplicants?: Array<CaseApplicant>;
    UserFiles?: Array<UserFile>;
};

export type DeleteUserFileRequest = {
    id: string;
};

export type UserFileDownloadResponse = {
    downloadUrl?: string;
};

export type CaseAttributes = Array<{
    name: string;
    value: string;
}>;

export type CaseCriterion = {
    id: string;
    Status?: string;
    LastModifiedByUserId?: string;
    CaseId?: string;
    UserId?: string;
    WorkflowStageCriterionId?: string;
    LastModifiedByUser?: unknown;
    Case?: unknown;
    WorkflowStageCriterion?: unknown;
};

export type CaseNote = {
    id: string;
    NoteText?: string;
    ParentNoteId?: string;
    AuthorUserId?: string;
    NoteAudienceScope?: string;
    AuthorUser?: User;
    CaseId?: string;
    CaseNoteReplies?: Array<unknown>;
    CaseNote?: unknown;
};

export type CaseTeamAssignment = {
    id: string;
    UserId?: string;
    CaseId?: string;
    CaseRole?: string;
    Case?: unknown;
    User?: User;
};

export type CaseFile = {
    id: string;
    UserFileId?: string;
    CreatedByUserId?: string;
    CaseId?: string;
    Case?: unknown;
    UserFile?: UserFile;
};

export type Case = {
    Title?: string;
    id: string;
    CaseType?: string;
    PercentComplete?: number;
    AgencyCaseIdentifier?: string;
    CaseAttributes?: CaseAttributes;
    CaseCriteria?: Array<CaseCriterion>;
    CaseNotes?: Array<CaseNote>;
    CaseTeamAssignments?: Array<CaseTeamAssignment>;
    CaseFiles?: Array<CaseFile>;
    CaseApplicants?: Array<CaseApplicant>;
};

export type GetUserFileCasesResponse = Array<Case>;

export type UpdateGeneratedFileRequest = {
    id: string;
    ContentType?: string;
    OriginalFilename?: string;
    Status?: string;
    SizeInBytes?: number;
    Title?: string;
};

export type UpdateGeneratedFileResponse = {
    id: string;
    ContentType?: string;
    OriginalFilename?: string;
    Status?: string;
    SizeInBytes?: number;
    CreatedAt?: string;
    LastModifiedAt?: string;
    Title?: string;
};

export type AddWorkFlowRequest = {
    WorkflowId: string;
};

export type AddWorkFlowResponse = {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    LegacyId?: string;
    IdpId?: string;
};

export type DeleteWorkFlowRequest = {
    WorkflowId: string;
};

export type DeleteWorkFlowResponse = {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    LegacyId?: string;
    IdpId?: string;
};

export type WorkflowStageCriterion = {
    id: string;
    CaseWorkflowStageId?: string;
    Name?: string;
    CaseCriteria?: Array<unknown>;
    CriterionFulfillmentType?: string;
    WorkflowStage?: unknown;
};

export type WorkflowStage = {
    id: string;
    StageName?: string;
    WorkflowId?: string;
    Workflow?: unknown;
    WorkflowStateCriteria?: Array<WorkflowStageCriterion>;
};

export type Workflow = {
    id: string;
    WorkflowStages?: Array<WorkflowStage>;
    Name?: string;
    Description?: string;
};

export type GetUserWorkFlowsResponse = Array<Workflow>;

export type CreateFamilyMemberRequest = {
    FirstName: string;
    LastName: string;
    DOB: string;
    Relationship: string;
};

export type CreateFamilyMemberResponse = {
    id: string;
    FirstName?: string;
    LastName?: string;
    UserId?: string;
    DOB?: string;
    Relationship?: string;
    User?: User;
    CaseApplicants?: Array<CaseApplicant>;
    UserFiles?: Array<UserFile>;
};

export type DeleteFamilyMemberRequest = Array<(string)>;

export type FamilyMember = {
    id: string;
    FirstName?: string;
    LastName?: string;
    UserId?: string;
    DOB?: string;
    Relationship?: string;
    User?: User;
    CaseApplicants?: Array<CaseApplicant>;
    UserFiles?: Array<UserFile>;
};

export type DeleteFamilyMemberResponse = Array<FamilyMember>;

export type AddCaseFamilyMembersRequest = Array<{
    UserFamilyMemberId: string;
}>;

export type AddCaseApplicantsResponse = {
    CaseId?: string;
    UserFamilyMemberId?: string;
    UserFamilyMember?: unknown;
    Case?: unknown;
};

export type DeleteCaseFamilyMembersRequest = Array<{
    UserFamilyMemberId: string;
}>;

export type CreateCaseRequestBody = {
    CaseTitle?: string;
    CaseType: string;
    CaseAttributes?: CaseAttributes;
    CaseIdentifier: string;
    FamilyMemberIds?: Array<(string)>;
    WorkflowId: string;
};

export type CreateCaseResponse = {
    Title?: string;
    id: string;
    CaseType?: string;
    PercentComplete?: number;
    AgencyCaseIdentifier?: string;
    CaseAttributes?: CaseAttributes;
    CaseCriteria?: Array<CaseCriterion>;
    CaseNotes?: Array<CaseNote>;
    CaseTeamAssignments?: Array<CaseTeamAssignment>;
    CaseFiles?: Array<CaseFile>;
    CaseApplicants?: Array<CaseApplicant>;
};

export type UpdateCaseRequestBody = {
    CaseTitle?: string;
    CaseType?: string;
    PercentComplete?: number;
    CaseAttributes?: CaseAttributes;
    Status?: string;
    AgencyCaseIdentifier?: string;
};

export type UpdateCaseResponse = {
    Title?: string;
    id: string;
    CaseType?: string;
    PercentComplete?: number;
    AgencyCaseIdentifier?: string;
    CaseAttributes?: CaseAttributes;
    CaseCriteria?: Array<CaseCriterion>;
    CaseNotes?: Array<CaseNote>;
    CaseTeamAssignments?: Array<CaseTeamAssignment>;
    CaseFiles?: Array<CaseFile>;
    CaseApplicants?: Array<CaseApplicant>;
};

export type GetCaseResponse = {
    Title?: string;
    id: string;
    CaseType?: string;
    PercentComplete?: number;
    AgencyCaseIdentifier?: string;
    CaseAttributes?: CaseAttributes;
    CaseCriteria?: Array<CaseCriterion>;
    CaseNotes?: Array<CaseNote>;
    CaseTeamAssignments?: Array<CaseTeamAssignment>;
    CaseFiles?: Array<CaseFile>;
    CaseApplicants?: Array<CaseApplicant>;
};

export type getCaseResponse = Array<Case>;

export type CreateUserRequest = {
    FirstName: string;
    LastName: string;
    Email: string;
    DOB: string;
    LanguageId: string;
    Workflows?: Array<(string)>;
};

export type CreateUserResponse = {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    LegacyId?: string;
    IdpId?: string;
};

export type UpdateUserRequest = {
    FirstName?: string;
    LastName?: string;
    Email?: string;
    DOB?: string;
    LanguageId?: string;
    TOSAcceptedAt?: string;
    PPAcceptedAt?: string;
};

export type UpdateUserResponse = {
    id?: string;
    FirstName?: string;
    LastName?: string;
    Email?: string;
    LegacyId?: string;
    IdpId?: string;
};

export type PlatformActivityLogs = {
    id: string;
    ActivityType?: string;
    ActivityValue?: string;
    RelatedId?: string;
    CreatedAt?: string;
    ActivityGeneratedByUserId?: string;
    Metadata?: unknown;
    User?: unknown;
};

export type GetUserActivityResponse = {
    items?: Array<PlatformActivityLogs>;
    total?: number;
    page?: number;
    limit?: number;
};

export type $OpenApiTs = {
    '/languages': {
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: Array<Language>;
            };
        };
    };
    '/cases/{caseId}/files': {
        post: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: AddCaseFileRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
        delete: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: DeleteCaseFileRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
    };
    '/cases/files/{id}': {
        patch: {
            req: {
                id: string;
                /**
                 * Default response body
                 */
                requestBody?: UpdateCaseFileRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
    };
    '/users/{userId}/files': {
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
                userId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: GetUserFilesResponse;
            };
        };
    };
    '/users/files': {
        post: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: CreateUserFileRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: CreateUserFileRequest;
            };
        };
        patch: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: UpdateFamilyMemberRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UpdateFamilyMemberResponse;
            };
        };
        delete: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: DeleteUserFileRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
    };
    '/users/{userId}/files/family-member': {
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
                userFamilyMemberId: string;
                userId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: GetUserFilesResponse;
            };
        };
    };
    '/users/files/download': {
        get: {
            req: {
                fileId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
                uploadVersionId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UserFileDownloadResponse;
            };
        };
    };
    '/users/files/{fileId}/cases': {
        get: {
            req: {
                fileId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
                userId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: GetUserFileCasesResponse;
            };
        };
    };
    '/users/files/generated': {
        patch: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: UpdateGeneratedFileRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UpdateGeneratedFileResponse;
            };
        };
    };
    '/users/files/generated/download': {
        get: {
            req: {
                generatedFileId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
                userId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UserFileDownloadResponse;
            };
        };
    };
    '/users/workflows': {
        post: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: AddWorkFlowRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: AddWorkFlowResponse;
            };
        };
        delete: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: DeleteWorkFlowRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: DeleteWorkFlowResponse;
            };
        };
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: GetUserWorkFlowsResponse;
            };
        };
    };
    '/workflows': {
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: Array<Workflow>;
            };
        };
    };
    '/user/family': {
        post: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: CreateFamilyMemberRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: CreateFamilyMemberResponse;
            };
        };
        patch: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: UpdateFamilyMemberRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UpdateFamilyMemberResponse;
            };
        };
        delete: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: DeleteFamilyMemberRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: DeleteFamilyMemberResponse;
            };
        };
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: Array<FamilyMember>;
            };
        };
    };
    '/user/family/{id}': {
        get: {
            req: {
                id: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: FamilyMember;
            };
        };
    };
    '/case/{caseId}/family-members': {
        post: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: AddCaseFamilyMembersRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: AddCaseApplicantsResponse;
            };
        };
        delete: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: DeleteCaseFamilyMembersRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: Array<CaseApplicant>;
            };
        };
    };
    '/cases': {
        post: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: CreateCaseRequestBody;
            };
            res: {
                /**
                 * Default response body
                 */
                200: CreateCaseResponse;
            };
        };
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: getCaseResponse;
            };
        };
    };
    '/cases/{caseId}': {
        patch: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: UpdateCaseRequestBody;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UpdateCaseResponse;
            };
        };
        delete: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                caseId: string;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: GetCaseResponse;
            };
        };
    };
    '/users': {
        post: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: CreateUserRequest;
            };
            res: {
                /**
                 * Default response body
                 */
                200: CreateUserResponse;
            };
        };
        get: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: User;
            };
        };
        patch: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: UpdateUserRequest;
                userId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: UpdateUserResponse;
            };
        };
        delete: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
    };
    '/users/activities': {
        get: {
            req: {
                filters: {
                    fromDate: string;
                    toDate: string;
                };
                limit: number;
                page: number;
                /**
                 * Default response body
                 */
                requestBody?: unknown;
            };
            res: {
                /**
                 * Default response body
                 */
                200: GetUserActivityResponse;
            };
        };
    };
    '/messaging/post-message-to-ws-connections': {
        post: {
            req: {
                /**
                 * Default response body
                 */
                requestBody?: unknown;
                userId: string;
            };
            res: {
                /**
                 * Default response body
                 */
                200: unknown;
            };
        };
    };
};