// This file is auto-generated by @hey-api/openapi-ts

export const $Language = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string'
        },
        Code: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'Name', 'Code', 'CreatedAt'],
    additionalProperties: false
} as const;

export const $AddCaseFileRequest = {
    type: 'object',
    properties: {
        GeneratedFileIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        CaseCriterionId: {
            type: 'string'
        }
    },
    required: ['GeneratedFileIds'],
    additionalProperties: false
} as const;

export const $DeleteCaseFileRequest = {
    type: 'object',
    properties: {
        GeneratedFileIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        CaseCriterionId: {
            type: 'string'
        }
    },
    required: ['GeneratedFileIds'],
    additionalProperties: false
} as const;

export const $StakeholderGroupRole = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        StakeholderGroupId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string',
            enum: ['Platform Administrator', 'Platform Development', 'Platform Support', 'Client', 'Client Trusted User', 'PATH Employee', 'PATH Administrator', 'HPD Employee', 'HPD Administrator', 'DHS Employee', 'DHS Administrator', 'Sponsor', 'CBO Supervisor', 'CBO Staffer']
        },
        Description: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UserStakeholderGroupRole = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        StakeholderGroupRoleId: {
            type: 'string',
            format: 'uuid'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        StakeholderGroupRole: {
            '$ref': '#/components/schemas/StakeholderGroupRole'
        }
    },
    additionalProperties: false
} as const;

export const $UserBase = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        },
        PlatformActivityLogs: {
            type: 'array',
            items: {
                type: 'object',
                properties: {},
                additionalProperties: false
            }
        },
        LanguageIsoCode: {
            type: 'string'
        },
        TOSAcceptedAt: {
            type: 'string',
            format: 'date-time'
        },
        TOSAccepted: {
            type: 'boolean'
        },
        StakeholderGroupRoles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserStakeholderGroupRole'
            }
        }
    },
    additionalProperties: false
} as const;

export const $BaseFamilyMember = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseUploadedMediaAssetVersion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        SizeInBytes: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string'
        },
        LastModifiedAt: {
            type: 'string'
        },
        CreatedByUserId: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string'
        },
        UserFileId: {
            type: 'string'
        },
        DeletedAt: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $BaseUserFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        LegacyId: {
            type: 'string'
        },
        ContentType: {
            type: 'string'
        },
        ActiveVersionId: {
            type: 'string',
            format: 'uuid'
        },
        FileType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Title: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        FilePath: {
            type: 'string'
        },
        FileUploadedAt: {
            type: 'string',
            format: 'date-time'
        },
        Description: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        OwnerUserId: {
            type: 'string'
        },
        UploadedMediaAssetVersions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseUploadedMediaAssetVersion'
            }
        },
        UploadUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CreatedByUserId: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string',
            format: 'email'
        }
    },
    required: ['ContentType', 'OriginalFilename', 'Title'],
    additionalProperties: false
} as const;

export const $BaseGeneratedUserFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        FamilyMemberId: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FileType: {
            type: 'string'
        },
        CaseFiles: {
            type: 'array',
            items: {
                type: 'object',
                properties: {},
                additionalProperties: false
            }
        },
        CreatedByUserId: {
            type: 'string'
        },
        CreatedByAgentUserId: {
            type: 'string'
        },
        CreatedByUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CreatedByAgentUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        FromUserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseUserFile'
            }
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseCaseFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        GeneratedFileId: {
            type: 'string',
            format: 'uuid'
        },
        GeneratedFile: {
            '$ref': '#/components/schemas/BaseGeneratedUserFile'
        },
        CaseCriterionId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedByAgentUserId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedByAgentUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        ReasonForResubmit: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        CreatedByUserId: {
            type: 'string',
            format: 'uuid'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        imagesAvailable: {
            type: 'boolean'
        }
    },
    required: ['id', 'Status'],
    additionalProperties: false
} as const;

export const $GeneratedUserFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FamilyMemberId: {
            type: 'string'
        },
        CreatedByUserId: {
            type: 'string'
        },
        CreatedByAgentUserId: {
            type: 'string'
        },
        CreatedByUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CreatedByAgentUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        FileType: {
            type: 'string'
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseFile'
            }
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        FromUserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseUserFile'
            }
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetCaseListingResponse = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'string',
                format: 'uuid'
            },
            ReasonForResubmit: {
                type: 'string'
            },
            Status: {
                type: 'string'
            },
            GeneratedFile: {
                '$ref': '#/components/schemas/GeneratedUserFile'
            }
        },
        required: ['id', 'Status'],
        additionalProperties: false
    }
} as const;

export const $UpdateCaseFileRequest = {
    type: 'object',
    properties: {
        Status: {
            type: 'string'
        },
        ReasonForResubmit: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $LogDownloadCaseFile = {
    type: 'object',
    properties: {
        caseFileIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    required: ['caseFileIds'],
    additionalProperties: false
} as const;

export const $LogPreviewCaseFile = {
    type: 'object',
    properties: {
        caseFileId: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['caseFileId'],
    additionalProperties: false
} as const;

export const $UploadedMediaAssetVersion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        OriginalFilename: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        OwnerUserId: {
            type: 'string'
        },
        CreatedByUserId: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string',
            format: 'email'
        }
    },
    required: ['ContentType', 'SizeInBytes', 'OriginalFilename'],
    additionalProperties: false
} as const;

export const $UserFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        LegacyId: {
            type: 'string'
        },
        ContentType: {
            type: 'string'
        },
        ActiveVersionId: {
            type: 'string',
            format: 'uuid'
        },
        OriginalFilename: {
            type: 'string'
        },
        FilePath: {
            type: 'string'
        },
        FileUploadedAt: {
            type: 'string',
            format: 'date-time'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        Title: {
            type: 'string'
        },
        FileType: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        OwnerUserId: {
            type: 'string'
        },
        GeneratedFileId: {
            type: 'string',
            format: 'uuid'
        },
        GeneratedFile: {
            '$ref': '#/components/schemas/GeneratedUserFile'
        },
        UploadedMediaAssetVersions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UploadedMediaAssetVersion'
            }
        },
        UploadUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CreatedByUserId: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string',
            format: 'email'
        },
        UploadUrl: {
            type: 'string'
        },
        oldId: {
            type: 'string'
        }
    },
    required: ['ContentType', 'OriginalFilename', 'Title'],
    additionalProperties: false
} as const;

export const $GetUserFilesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/UserFile'
    }
} as const;

export const $CreateUserFileRequest = {
    type: 'object',
    properties: {
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        Title: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        GeneratedFileId: {
            type: 'string'
        },
        CaseCriterionId: {
            type: 'string',
            format: 'uuid'
        },
        ForUserId: {
            type: 'string',
            format: 'uuid'
        },
        DeletedFiles: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        FileType: {
            type: 'string'
        },
        FilesOrder: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    old: {
                        type: 'boolean'
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['old', 'id'],
                additionalProperties: false
            }
        },
        Files: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string'
                    },
                    ContentType: {
                        type: 'string'
                    },
                    OriginalFilename: {
                        type: 'string'
                    },
                    SizeInBytes: {
                        type: 'number',
                        format: 'float'
                    },
                    PageNumber: {
                        type: 'number',
                        format: 'float'
                    }
                },
                required: ['id', 'ContentType', 'OriginalFilename', 'SizeInBytes', 'PageNumber'],
                additionalProperties: false
            }
        }
    },
    required: ['Title', 'Files'],
    additionalProperties: false
} as const;

export const $CreateUserFileResponse = {
    type: 'object',
    properties: {
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        }
    },
    additionalProperties: false
} as const;

export const $UpdateUserFileRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        CaseCriterionId: {
            type: 'string',
            format: 'uuid'
        },
        ForUserId: {
            type: 'string',
            format: 'uuid'
        },
        PageNumber: {
            type: 'number',
            format: 'float'
        },
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateUserFileResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        LegacyId: {
            type: 'string'
        },
        ContentType: {
            type: 'string'
        },
        ActiveVersionId: {
            type: 'string',
            format: 'uuid'
        },
        OriginalFilename: {
            type: 'string'
        },
        FilePath: {
            type: 'string'
        },
        FileUploadedAt: {
            type: 'string',
            format: 'date-time'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        Title: {
            type: 'string'
        },
        FileType: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        OwnerUserId: {
            type: 'string'
        },
        GeneratedFileId: {
            type: 'string',
            format: 'uuid'
        },
        GeneratedFile: {
            '$ref': '#/components/schemas/GeneratedUserFile'
        },
        UploadedMediaAssetVersions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UploadedMediaAssetVersion'
            }
        },
        UploadUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CreatedByUserId: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string',
            format: 'email'
        },
        UploadUrl: {
            type: 'string'
        },
        oldId: {
            type: 'string'
        }
    },
    required: ['ContentType', 'OriginalFilename', 'Title'],
    additionalProperties: false
} as const;

export const $DeleteUserFileRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UserFileDownloadResponse = {
    type: 'object',
    properties: {
        downloadUrl: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $CaseAttributes = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: {
                type: 'string'
            },
            value: {
                type: 'string'
            }
        },
        required: ['name', 'value'],
        additionalProperties: false
    }
} as const;

export const $BaseCaseNote = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        NoteText: {
            type: 'string'
        },
        ParentNoteId: {
            type: 'string'
        },
        AuthorUserId: {
            type: 'string',
            format: 'uuid'
        },
        NoteAudienceScope: {
            type: 'string'
        },
        AuthorUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseWorkflow = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string'
        },
        Type: {
            type: 'string'
        },
        Description: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseWorkflowStage = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        StageName: {
            type: 'string'
        },
        StagePosition: {
            type: 'string'
        },
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        },
        Workflow: {
            '$ref': '#/components/schemas/BaseWorkflow'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseWorkflowStageCriterion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseWorkflowStageId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                type: 'object',
                properties: {},
                additionalProperties: false
            }
        },
        CriterionSubGroupName: {
            type: 'string'
        },
        CriterionGroupName: {
            type: 'string'
        },
        CriterionFulfillmentType: {
            type: 'string'
        },
        WorkflowStage: {
            '$ref': '#/components/schemas/BaseWorkflowStage'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseCaseCriterion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        Status: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string'
        },
        CaseId: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        Index: {
            type: 'string'
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseFile'
            }
        },
        RuleSets: {},
        CriterionGroupName: {
            type: 'string'
        },
        CriterionSubGroupName: {
            type: 'string'
        },
        CriterionFulfillmentType: {
            type: 'string'
        },
        CriterionFulfillmentStatus: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        WorkflowStageCriterionId: {
            type: 'string'
        },
        WorkflowStageCriterion: {
            '$ref': '#/components/schemas/BaseWorkflowStageCriterion'
        },
        LastModifiedByUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $BaseCase = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        SSN: {
            type: 'string'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseNote'
            }
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseCriterion'
            }
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $WorkflowStageCriterion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseWorkflowStageId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseCriterion'
            }
        },
        CriterionFulfillmentType: {
            type: 'string'
        },
        DeletedAt: {
            type: 'string',
            format: 'date-time'
        },
        CriterionSubGroupName: {
            type: 'string'
        },
        CriterionGroupName: {
            type: 'string'
        },
        WorkflowStage: {
            '$ref': '#/components/schemas/BaseWorkflowStage'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseCriterion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        Status: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string'
        },
        CaseId: {
            type: 'string'
        },
        RuleSets: {},
        Index: {
            type: 'string'
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseFile'
            }
        },
        UserId: {
            type: 'string'
        },
        WorkflowStageCriterionId: {
            type: 'string'
        },
        LastModifiedByUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CriterionGroupName: {
            type: 'string'
        },
        CriterionSubGroupName: {
            type: 'string'
        },
        CriterionFulfillmentType: {
            type: 'string'
        },
        CriterionFulfillmentStatus: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Case: {
            '$ref': '#/components/schemas/BaseCase'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        WorkflowStageCriterion: {
            '$ref': '#/components/schemas/WorkflowStageCriterion'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseNote = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        NoteText: {
            type: 'string'
        },
        ParentNoteId: {
            type: 'string'
        },
        AuthorUserId: {
            type: 'string',
            format: 'uuid'
        },
        NoteAudienceScope: {
            type: 'string'
        },
        AuthorUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        CaseNoteReplies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseNote'
            }
        },
        CaseNote: {
            '$ref': '#/components/schemas/BaseCaseNote'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseTeamAssignment = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        CaseRole: {
            type: 'string'
        },
        Case: {
            '$ref': '#/components/schemas/BaseCase'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        UserFileId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedByUserId: {
            type: 'string',
            format: 'uuid'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        ReasonForResubmit: {
            type: 'string'
        },
        CreatedByAgentUserId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedByAgentUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        Status: {
            type: 'string'
        },
        Case: {
            '$ref': '#/components/schemas/BaseCase'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        CaseCriterionId: {
            type: 'string'
        },
        CaseCriterion: {
            '$ref': '#/components/schemas/CaseCriterion'
        },
        GeneratedFile: {
            '$ref': '#/components/schemas/GeneratedUserFile'
        },
        imagesAvailable: {
            type: 'boolean'
        }
    },
    required: ['id', 'Status'],
    additionalProperties: false
} as const;

export const $CaseApplicant = {
    type: 'object',
    properties: {
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        Case: {
            '$ref': '#/components/schemas/BaseCase'
        }
    },
    additionalProperties: false
} as const;

export const $Case = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        Status: {
            type: 'string'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        SSN: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetUserFileCasesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Case'
    }
} as const;

export const $UpdateGeneratedFileRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FileType: {
            type: 'string'
        },
        File: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateGeneratedFileResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        Description: {
            type: 'string'
        },
        FamilyMemberId: {
            type: 'string'
        },
        CreatedByUserId: {
            type: 'string'
        },
        CreatedByAgentUserId: {
            type: 'string'
        },
        CreatedByUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        CreatedByAgentUser: {
            '$ref': '#/components/schemas/UserBase'
        },
        FileType: {
            type: 'string'
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseCaseFile'
            }
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        FromUserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BaseUserFile'
            }
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetUserFileTypesResponse = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            documentName: {
                type: 'string'
            },
            documentGroup: {
                type: 'string'
            }
        },
        required: ['documentName', 'documentGroup'],
        additionalProperties: false
    }
} as const;

export const $WorkflowStage = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        StageName: {
            type: 'string'
        },
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        },
        StagePosition: {
            type: 'number',
            format: 'float'
        },
        Workflow: {
            '$ref': '#/components/schemas/BaseWorkflow'
        },
        WorkflowStateCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WorkflowStageCriterion'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $Workflow = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        WorkflowStages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WorkflowStage'
            }
        },
        Type: {
            type: 'string'
        },
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CreateFamilyMemberRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        }
    },
    required: ['FirstName', 'LastName', 'DOB', 'Relationship'],
    additionalProperties: false
} as const;

export const $CreateFamilyMemberResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        },
        GeneratedFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GeneratedUserFile'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateFamilyMemberRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        LastName: {
            type: 'string'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateFamilyMemberResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        },
        GeneratedFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GeneratedUserFile'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $DeleteFamilyMemberRequest = {
    type: 'array',
    items: {
        type: 'string',
        format: 'uuid'
    }
} as const;

export const $FamilyMember = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        },
        GeneratedFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GeneratedUserFile'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $DeleteFamilyMemberResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/FamilyMember'
    }
} as const;

export const $AddCaseFamilyMembersRequest = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            UserFamilyMemberId: {
                type: 'string',
                format: 'uuid'
            }
        },
        required: ['UserFamilyMemberId'],
        additionalProperties: false
    }
} as const;

export const $AddCaseApplicantsResponse = {
    type: 'object',
    properties: {
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMember: {
            '$ref': '#/components/schemas/BaseFamilyMember'
        },
        Case: {
            '$ref': '#/components/schemas/BaseCase'
        }
    },
    additionalProperties: false
} as const;

export const $DeleteCaseFamilyMembersRequest = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            UserFamilyMemberId: {
                type: 'string',
                format: 'uuid'
            }
        },
        required: ['UserFamilyMemberId'],
        additionalProperties: false
    }
} as const;

export const $CreateCaseRequestBody = {
    type: 'object',
    properties: {
        CaseTitle: {
            type: 'string'
        },
        CaseType: {
            type: 'string'
        },
        SSN: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseIdentifier: {
            type: 'string'
        },
        FamilyMemberIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['CaseType', 'WorkflowId'],
    additionalProperties: false
} as const;

export const $CreateCaseResponse = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        Status: {
            type: 'string'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        SSN: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateCaseRequestBody = {
    type: 'object',
    properties: {
        CaseTitle: {
            type: 'string'
        },
        CaseType: {
            type: 'string'
        },
        SSN: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        Status: {
            type: 'string',
            enum: ['OPEN', 'CLOSED']
        },
        AgencyCaseIdentifier: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UpdateCaseResponse = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        Status: {
            type: 'string'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        SSN: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetCaseResponse = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        Status: {
            type: 'string'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        SSN: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetCasesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Case'
    }
} as const;

export const $LogViewCaseFamilyMember = {
    type: 'object',
    properties: {
        CaseId: {
            type: 'string'
        }
    },
    required: ['CaseId'],
    additionalProperties: false
} as const;

export const $CreateUserRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LanguageIsoCode: {
            type: 'string'
        }
    },
    required: ['FirstName', 'LastName', 'Email', 'DOB'],
    additionalProperties: false
} as const;

export const $BasePlatformActivityLogs = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ActivityType: {
            type: 'string',
            enum: ['LOGIN', 'LOGOUT', 'CLIENT_UPDATE_PROFILE_SELF', 'CLIENT_CREATE_FAMILY_MEMBER', 'CLIENT_UPDATE_FAMILY_MEMBER', 'CLIENT_DELETE_FAMILY_MEMBERS', 'CLIENT_GET_FAMILY_MEMBER_BY_ID', 'CLIENT_GET_ALL_USER_FAMILY_MEMBERS', 'CLIENT_UPLOAD_DOCUMENT_SELF', 'CLIENT_UPDATE_DOCUMENT_SELF', 'CLIENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DOWNLOAD_DOCUMENT_SELF', 'CLIENT_DOWNLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DELETE_DOCUMENT_SELF', 'CLIENT_DELETE_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_CRITERION', 'AGENT_UPDATE_PROFILE_SELF', 'AGENT_UPLOAD_DOCUMENT_CLIENT', 'AGENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_DOCUMENT_CLIENT', 'AGENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'AGENT_GET_ALL_USER_CASES', 'AGENT_APPROVE_DOCUMENT_CHECKLIST', 'AGENT_REMOVE_CASE_WORKFLOW_CRITERIA', 'AGENT_ADD_CASE_FILE_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'AGENT_ADD_NEW_CASE_NOTE', 'AGENT_REPLY_TO_CASE_NOTE', 'AGENT_CLOSE_CASE', 'AGENT_UNDER_REVIEW_CASE_FILE_CLIENT', 'AGENT_REMOVE_CASE_NOTE', 'AGENT_ACTIVATE_CASE', 'AGENT_DOWNLOAD_CASE_FILE_CLIENT', 'AGENT_DOWNLOAD_ALL_CASE_FILES', 'AGENT_APPROVE_CASE_FILE_CLIENT', 'AGENT_REJECT_CASE_FILE_CLIENT', 'AGENT_VIEW_CASE_NOTES', 'AGENT_PENDING_CASE_FILE_CLIENT', 'AGENT_EDIT_CASE_NOTE', 'AGENT_UPDATE_CASE_FILE_CLIENT', 'AGENT_PREVIEW_CASE_FILE', 'AGENT_GET_CASE_FILE_LISTING', 'CLIENT_CREATE_CASE', 'CLIENT_DELETE_CASE', 'CLIENT_UPDATE_CASE', 'CLIENT_GET_CASE_BY_ID', 'CLIENT_ADD_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FILE_LIST', 'CLIENT_ADD_CASE_FILES_SELF', 'CLIENT_RESUBMIT_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FAMILY_MEMBERS', 'CLIENT_VIEW_CASE_TEAM_MEMBERS', 'CLIENT_GET_CASE_FAMILY_MEMBERS', 'CLIENT_UPDATE_CASE_FILE_SELF', 'CLIENT_ADD_CASE_FILES_FAMILY_MEMBER', 'CLIENT_REMOVE_CASE_FILES_FAMILY_MEMBER', 'CLIENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'CLIENT_UPDATE_CASE_FILE_FAMILY_MEMBER', 'AGENT_APPROVE_CASE_FILE_FAMILY_MEMBER', 'AGENT_PENDING_CASE_FILE_FAMILY_MEMBER', 'AGENT_REJECT_CASE_FILE_FAMILY_MEMBER', 'AGENT_ADD_CASE_FILES_FAMILY_MEMBER', 'AGENT_DOWNLOAD_CASE_FILE_FAMILY_MEMBER', 'AGENT_UNDER_REVIEW_CASE_FILE_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_FILE_FAMILY_MEMBER']
        },
        ActivityValue: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        RelatedEntity: {
            type: 'string',
            enum: ['CASE', 'USER_CASE', 'CASE_FILE', 'FAMILY_MEMBER', 'CASE_APPLICANT', 'USER_FILE', 'CASE_FAMILY_MEMBER']
        },
        ActivityGeneratedByUserId: {
            type: 'string',
            format: 'uuid'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        }
    },
    required: ['id', 'ActivityType', 'ActivityValue', 'RelatedEntity'],
    additionalProperties: false
} as const;

export const $CreateUserResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        },
        PlatformActivityLogs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BasePlatformActivityLogs'
            }
        },
        LanguageIsoCode: {
            type: 'string'
        },
        TOSAcceptedAt: {
            type: 'string',
            format: 'date-time'
        },
        TOSAccepted: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UpdateUserRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        LanguageIsoCode: {
            type: 'string'
        },
        TOSAcceptedAt: {
            type: 'string',
            format: 'date-time'
        },
        TOSAccepted: {
            type: 'boolean'
        },
        PPAcceptedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $UpdateUserResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        },
        PlatformActivityLogs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BasePlatformActivityLogs'
            }
        },
        LanguageIsoCode: {
            type: 'string'
        },
        TOSAcceptedAt: {
            type: 'string',
            format: 'date-time'
        },
        TOSAccepted: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $PlatformActivityLogs = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ActivityType: {
            type: 'string',
            enum: ['LOGIN', 'LOGOUT', 'CLIENT_UPDATE_PROFILE_SELF', 'CLIENT_CREATE_FAMILY_MEMBER', 'CLIENT_UPDATE_FAMILY_MEMBER', 'CLIENT_DELETE_FAMILY_MEMBERS', 'CLIENT_GET_FAMILY_MEMBER_BY_ID', 'CLIENT_GET_ALL_USER_FAMILY_MEMBERS', 'CLIENT_UPLOAD_DOCUMENT_SELF', 'CLIENT_UPDATE_DOCUMENT_SELF', 'CLIENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DOWNLOAD_DOCUMENT_SELF', 'CLIENT_DOWNLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DELETE_DOCUMENT_SELF', 'CLIENT_DELETE_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_CRITERION', 'AGENT_UPDATE_PROFILE_SELF', 'AGENT_UPLOAD_DOCUMENT_CLIENT', 'AGENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_DOCUMENT_CLIENT', 'AGENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'AGENT_GET_ALL_USER_CASES', 'AGENT_APPROVE_DOCUMENT_CHECKLIST', 'AGENT_REMOVE_CASE_WORKFLOW_CRITERIA', 'AGENT_ADD_CASE_FILE_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'AGENT_ADD_NEW_CASE_NOTE', 'AGENT_REPLY_TO_CASE_NOTE', 'AGENT_CLOSE_CASE', 'AGENT_UNDER_REVIEW_CASE_FILE_CLIENT', 'AGENT_REMOVE_CASE_NOTE', 'AGENT_ACTIVATE_CASE', 'AGENT_DOWNLOAD_CASE_FILE_CLIENT', 'AGENT_DOWNLOAD_ALL_CASE_FILES', 'AGENT_APPROVE_CASE_FILE_CLIENT', 'AGENT_REJECT_CASE_FILE_CLIENT', 'AGENT_VIEW_CASE_NOTES', 'AGENT_PENDING_CASE_FILE_CLIENT', 'AGENT_EDIT_CASE_NOTE', 'AGENT_UPDATE_CASE_FILE_CLIENT', 'AGENT_PREVIEW_CASE_FILE', 'AGENT_GET_CASE_FILE_LISTING', 'CLIENT_CREATE_CASE', 'CLIENT_DELETE_CASE', 'CLIENT_UPDATE_CASE', 'CLIENT_GET_CASE_BY_ID', 'CLIENT_ADD_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FILE_LIST', 'CLIENT_ADD_CASE_FILES_SELF', 'CLIENT_RESUBMIT_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FAMILY_MEMBERS', 'CLIENT_VIEW_CASE_TEAM_MEMBERS', 'CLIENT_GET_CASE_FAMILY_MEMBERS', 'CLIENT_UPDATE_CASE_FILE_SELF', 'CLIENT_ADD_CASE_FILES_FAMILY_MEMBER', 'CLIENT_REMOVE_CASE_FILES_FAMILY_MEMBER', 'CLIENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'CLIENT_UPDATE_CASE_FILE_FAMILY_MEMBER', 'AGENT_APPROVE_CASE_FILE_FAMILY_MEMBER', 'AGENT_PENDING_CASE_FILE_FAMILY_MEMBER', 'AGENT_REJECT_CASE_FILE_FAMILY_MEMBER', 'AGENT_ADD_CASE_FILES_FAMILY_MEMBER', 'AGENT_DOWNLOAD_CASE_FILE_FAMILY_MEMBER', 'AGENT_UNDER_REVIEW_CASE_FILE_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_FILE_FAMILY_MEMBER']
        },
        ActivityValue: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        RelatedEntity: {
            type: 'string',
            enum: ['CASE', 'USER_CASE', 'CASE_FILE', 'FAMILY_MEMBER', 'CASE_APPLICANT', 'USER_FILE', 'CASE_FAMILY_MEMBER']
        },
        ActivityGeneratedByUserId: {
            type: 'string',
            format: 'uuid'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        }
    },
    required: ['id', 'ActivityType', 'ActivityValue', 'RelatedEntity'],
    additionalProperties: false
} as const;

export const $GetUserActivitiesResponse = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PlatformActivityLogs'
            }
        },
        currentPage: {
            type: 'number',
            format: 'float'
        },
        pageSize: {
            type: 'number',
            format: 'float'
        },
        total: {
            type: 'number',
            format: 'float'
        },
        totalPages: {
            type: 'number',
            format: 'float'
        }
    },
    additionalProperties: false
} as const;

export const $GetUsesCases = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            id: {
                type: 'string',
                format: 'uuid'
            },
            FirstName: {
                type: 'string'
            },
            LastName: {
                type: 'string'
            },
            Email: {
                type: 'string',
                format: 'email'
            },
            DOB: {
                type: 'string',
                format: 'date-time'
            },
            LegacyId: {
                type: 'string'
            },
            IdpId: {
                type: 'string'
            },
            LanguageIsoCode: {
                type: 'string'
            },
            TOSAcceptedAt: {
                type: 'string',
                format: 'date-time'
            },
            TOSAccepted: {
                type: 'boolean'
            },
            CaseTeamAssignments: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/CaseTeamAssignment'
                }
            }
        },
        additionalProperties: false
    }
} as const;

export const $GetUser = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        },
        LanguageIsoCode: {
            type: 'string'
        },
        TOSAcceptedAt: {
            type: 'string',
            format: 'date-time'
        },
        TOSAccepted: {
            type: 'boolean'
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        UserFamilyMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FamilyMember'
            }
        }
    },
    additionalProperties: false
} as const;

export const $AgencyType = {
    type: 'object',
    properties: {
        HPD: {
            type: 'string',
            enum: ['HPD']
        },
        DHS: {
            type: 'string',
            enum: ['DHS']
        },
        PATH: {
            type: 'string',
            enum: ['PATH']
        }
    },
    required: ['HPD', 'DHS', 'PATH'],
    additionalProperties: false
} as const;

export const $CaseFileStatus = {
    type: 'object',
    properties: {
        PENDING: {
            type: 'string',
            enum: ['PENDING']
        },
        UNDER_REVIEW: {
            type: 'string',
            enum: ['UNDER_REVIEW']
        },
        ACCEPTED: {
            type: 'string',
            enum: ['ACCEPTED']
        },
        REJECT: {
            type: 'string',
            enum: ['REJECT']
        }
    },
    required: ['PENDING', 'UNDER_REVIEW', 'ACCEPTED', 'REJECT'],
    additionalProperties: false
} as const;

export const $CaseCriterionFulfillmentStatus = {
    type: 'object',
    properties: {
        PENDING: {
            type: 'string',
            enum: ['PENDING']
        },
        DONE: {
            type: 'string',
            enum: ['DONE']
        }
    },
    required: ['PENDING', 'DONE'],
    additionalProperties: false
} as const;

export const $CriterionFulfillmentType = {
    type: 'object',
    properties: {
        REQUIRED: {
            type: 'string',
            enum: ['REQUIRED']
        },
        OPTIONAL: {
            type: 'string',
            enum: ['OPTIONAL']
        }
    },
    required: ['REQUIRED', 'OPTIONAL'],
    additionalProperties: false
} as const;

export const $UserFileStatus = {
    type: 'object',
    properties: {
        DRAFT: {
            type: 'string',
            enum: ['UPLOAD_PENDING']
        },
        UPLOADED: {
            type: 'string',
            enum: ['UPLOADED']
        }
    },
    required: ['DRAFT', 'UPLOADED'],
    additionalProperties: false
} as const;

export const $StakeHolderGroups = {
    type: 'object',
    properties: {
        PLATFORM: {
            type: 'string',
            enum: ['Platform Development']
        },
        CLIENT: {
            type: 'string',
            enum: ['Client']
        },
        TRUSTED_USER: {
            type: 'string',
            enum: ['Client Trusted User']
        },
        PATH_AGENCY: {
            type: 'string',
            enum: ['PATH Agency']
        },
        HPD_AGENCY: {
            type: 'string',
            enum: ['HPD Agency']
        },
        DHS_AGENCY: {
            type: 'string',
            enum: ['DHS Agency']
        },
        LANDLORD: {
            type: 'string',
            enum: ['Building Landlord / Owner']
        },
        SPONSOR: {
            type: 'string',
            enum: ['Sponsor / Marketing Agent']
        },
        HOUSING_SPECIALIST_AGENT: {
            type: 'string',
            enum: ['Housing Specialist Agent']
        },
        CBO: {
            type: 'string',
            enum: ['Community-Based Organization']
        }
    },
    required: ['PLATFORM', 'CLIENT', 'TRUSTED_USER', 'PATH_AGENCY', 'HPD_AGENCY', 'DHS_AGENCY', 'LANDLORD', 'SPONSOR', 'HOUSING_SPECIALIST_AGENT', 'CBO'],
    additionalProperties: false
} as const;

export const $StakeHolderGroupRoles = {
    type: 'object',
    properties: {
        PLATFORM_ADMIN: {
            type: 'string',
            enum: ['Platform Administrator']
        },
        PLATFORM_DEV: {
            type: 'string',
            enum: ['Platform Development']
        },
        PLATFORM_SUPPORT: {
            type: 'string',
            enum: ['Platform Support']
        },
        CLIENT: {
            type: 'string',
            enum: ['Client']
        },
        TRUSTED_USER: {
            type: 'string',
            enum: ['Client Trusted User']
        },
        PATH_AGENT: {
            type: 'string',
            enum: ['PATH Employee']
        },
        PATH_ADMIN: {
            type: 'string',
            enum: ['PATH Administrator']
        },
        HPD_AGENT: {
            type: 'string',
            enum: ['HPD Employee']
        },
        HPD_ADMIN: {
            type: 'string',
            enum: ['HPD Administrator']
        },
        DHS_AGENT: {
            type: 'string',
            enum: ['DHS Employee']
        },
        DHS_ADMIN: {
            type: 'string',
            enum: ['DHS Administrator']
        },
        SPONSOR: {
            type: 'string',
            enum: ['Sponsor']
        },
        CBO_SUPERVISOR: {
            type: 'string',
            enum: ['CBO Supervisor']
        },
        CBO_STAFFER: {
            type: 'string',
            enum: ['CBO Staffer']
        }
    },
    required: ['PLATFORM_ADMIN', 'PLATFORM_DEV', 'PLATFORM_SUPPORT', 'CLIENT', 'TRUSTED_USER', 'PATH_AGENT', 'PATH_ADMIN', 'HPD_AGENT', 'HPD_ADMIN', 'DHS_AGENT', 'DHS_ADMIN', 'SPONSOR', 'CBO_SUPERVISOR', 'CBO_STAFFER'],
    additionalProperties: false
} as const;

export const $Permissions = {
    type: 'object',
    properties: {
        CAN_CHANGE_CASE_FILE_STATUS: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    }
                ]
            }
        },
        CAN_CHANGE_CASE_STATUS: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    }
                ]
            }
        },
        CAN_CHANGE_CASE_WORKFLOW_STAGE_STATUS: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['Sponsor']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    }
                ]
            }
        },
        CAN_VIEW_CASE_WORKFLOW_STAGE_STATUS: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['CBO Staffer']
                    },
                    {
                        enum: ['CBO Supervisor']
                    },
                    {
                        enum: ['Sponsor']
                    },
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    },
                    {
                        enum: ['Client']
                    },
                    {
                        enum: ['Client Trusted User']
                    }
                ]
            }
        },
        CAN_VIEW_CASE_FILE_STATUS: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['CBO Staffer']
                    },
                    {
                        enum: ['CBO Supervisor']
                    },
                    {
                        enum: ['Sponsor']
                    },
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    },
                    {
                        enum: ['Client']
                    },
                    {
                        enum: ['Client Trusted User']
                    }
                ]
            }
        },
        CAN_GET_USER_CASE: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['CBO Staffer']
                    },
                    {
                        enum: ['CBO Supervisor']
                    },
                    {
                        enum: ['Sponsor']
                    },
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    },
                    {
                        enum: ['Client']
                    },
                    {
                        enum: ['Client Trusted User']
                    }
                ]
            }
        },
        CAN_DOWNLOAD_CASE_FILE: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['CBO Staffer']
                    },
                    {
                        enum: ['CBO Supervisor']
                    },
                    {
                        enum: ['Sponsor']
                    },
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    },
                    {
                        enum: ['Client']
                    },
                    {
                        enum: ['Client Trusted User']
                    }
                ]
            }
        },
        CAN_UPLOAD_CASE_FILE_FOR_CLIENT: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        enum: ['CBO Staffer']
                    },
                    {
                        enum: ['CBO Supervisor']
                    },
                    {
                        enum: ['HPD Administrator']
                    },
                    {
                        enum: ['HPD Employee']
                    },
                    {
                        enum: ['DHS Administrator']
                    },
                    {
                        enum: ['DHS Employee']
                    },
                    {
                        enum: ['PATH Administrator']
                    },
                    {
                        enum: ['PATH Employee']
                    },
                    {
                        enum: ['Client']
                    },
                    {
                        enum: ['Client Trusted User']
                    }
                ]
            }
        }
    },
    required: ['CAN_CHANGE_CASE_FILE_STATUS', 'CAN_CHANGE_CASE_STATUS', 'CAN_CHANGE_CASE_WORKFLOW_STAGE_STATUS', 'CAN_VIEW_CASE_WORKFLOW_STAGE_STATUS', 'CAN_VIEW_CASE_FILE_STATUS', 'CAN_GET_USER_CASE', 'CAN_DOWNLOAD_CASE_FILE', 'CAN_UPLOAD_CASE_FILE_FOR_CLIENT'],
    additionalProperties: false
} as const;

export const $ActivityLogs = {
    type: 'array',
    items: {
        type: 'string',
        enum: ['LOGIN', 'LOGOUT', 'CLIENT_UPDATE_PROFILE_SELF', 'CLIENT_CREATE_FAMILY_MEMBER', 'CLIENT_UPDATE_FAMILY_MEMBER', 'CLIENT_DELETE_FAMILY_MEMBERS', 'CLIENT_GET_FAMILY_MEMBER_BY_ID', 'CLIENT_GET_ALL_USER_FAMILY_MEMBERS', 'CLIENT_UPLOAD_DOCUMENT_SELF', 'CLIENT_UPDATE_DOCUMENT_SELF', 'CLIENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DOWNLOAD_DOCUMENT_SELF', 'CLIENT_DOWNLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DELETE_DOCUMENT_SELF', 'CLIENT_DELETE_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_CRITERION', 'AGENT_UPDATE_PROFILE_SELF', 'AGENT_UPLOAD_DOCUMENT_CLIENT', 'AGENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_DOCUMENT_CLIENT', 'AGENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'AGENT_GET_ALL_USER_CASES', 'AGENT_APPROVE_DOCUMENT_CHECKLIST', 'AGENT_REMOVE_CASE_WORKFLOW_CRITERIA', 'AGENT_ADD_CASE_FILE_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'AGENT_ADD_NEW_CASE_NOTE', 'AGENT_REPLY_TO_CASE_NOTE', 'AGENT_CLOSE_CASE', 'AGENT_UNDER_REVIEW_CASE_FILE_CLIENT', 'AGENT_REMOVE_CASE_NOTE', 'AGENT_ACTIVATE_CASE', 'AGENT_DOWNLOAD_CASE_FILE_CLIENT', 'AGENT_DOWNLOAD_ALL_CASE_FILES', 'AGENT_APPROVE_CASE_FILE_CLIENT', 'AGENT_REJECT_CASE_FILE_CLIENT', 'AGENT_VIEW_CASE_NOTES', 'AGENT_PENDING_CASE_FILE_CLIENT', 'AGENT_EDIT_CASE_NOTE', 'AGENT_UPDATE_CASE_FILE_CLIENT', 'AGENT_PREVIEW_CASE_FILE', 'AGENT_GET_CASE_FILE_LISTING', 'CLIENT_CREATE_CASE', 'CLIENT_DELETE_CASE', 'CLIENT_UPDATE_CASE', 'CLIENT_GET_CASE_BY_ID', 'CLIENT_ADD_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FILE_LIST', 'CLIENT_ADD_CASE_FILES_SELF', 'CLIENT_RESUBMIT_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FAMILY_MEMBERS', 'CLIENT_VIEW_CASE_TEAM_MEMBERS', 'CLIENT_GET_CASE_FAMILY_MEMBERS', 'CLIENT_UPDATE_CASE_FILE_SELF', 'CLIENT_ADD_CASE_FILES_FAMILY_MEMBER', 'CLIENT_REMOVE_CASE_FILES_FAMILY_MEMBER', 'CLIENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'CLIENT_UPDATE_CASE_FILE_FAMILY_MEMBER', 'AGENT_APPROVE_CASE_FILE_FAMILY_MEMBER', 'AGENT_PENDING_CASE_FILE_FAMILY_MEMBER', 'AGENT_REJECT_CASE_FILE_FAMILY_MEMBER', 'AGENT_ADD_CASE_FILES_FAMILY_MEMBER', 'AGENT_DOWNLOAD_CASE_FILE_FAMILY_MEMBER', 'AGENT_UNDER_REVIEW_CASE_FILE_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_FILE_FAMILY_MEMBER']
    }
} as const;

export const $Constants = {
    type: 'object',
    properties: {
        AgencyType: {
            '$ref': '#/components/schemas/AgencyType'
        },
        CaseFileStatus: {
            '$ref': '#/components/schemas/CaseFileStatus'
        },
        CaseCriterionFulfillmentStatus: {
            '$ref': '#/components/schemas/CaseCriterionFulfillmentStatus'
        },
        CriterionFulfillmentType: {
            '$ref': '#/components/schemas/CriterionFulfillmentType'
        },
        UserFileStatus: {
            '$ref': '#/components/schemas/UserFileStatus'
        },
        StakeHolderGroups: {
            '$ref': '#/components/schemas/StakeHolderGroups'
        },
        StakeHolderGroupRoles: {
            '$ref': '#/components/schemas/StakeHolderGroupRoles'
        },
        Permissions: {
            '$ref': '#/components/schemas/Permissions'
        },
        ActivityLogs: {
            '$ref': '#/components/schemas/ActivityLogs'
        }
    },
    required: ['AgencyType', 'CaseFileStatus', 'CaseCriterionFulfillmentStatus', 'CriterionFulfillmentType', 'UserFileStatus', 'StakeHolderGroups', 'StakeHolderGroupRoles', 'Permissions', 'ActivityLogs'],
    additionalProperties: false
} as const;

export const $AddCaseNoteRequest = {
    type: 'object',
    properties: {
        NoteText: {
            type: 'string'
        },
        ParentNodeId: {
            type: 'string'
        },
        NoteAudienceScope: {
            type: 'string'
        },
        CaseId: {
            type: 'string'
        }
    },
    required: ['NoteText', 'CaseId'],
    additionalProperties: false
} as const;

export const $UpdateCaseNoteRequest = {
    type: 'object',
    properties: {
        NoteText: {
            type: 'string'
        },
        id: {
            type: 'string'
        }
    },
    required: ['NoteText', 'id'],
    additionalProperties: false
} as const;

export const $GetCaseNotesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/CaseNote'
    }
} as const;

export const $UpdateCaseCriterion = {
    type: 'object',
    properties: {
        CriterionFulfillmentStatus: {
            type: 'string',
            enum: ['PENDING', 'DONE']
        },
        Name: {
            type: 'string'
        },
        CriterionSubGroupName: {
            type: 'string'
        },
        CriterionGroupName: {
            type: 'string'
        }
    },
    required: ['CriterionFulfillmentStatus'],
    additionalProperties: false
} as const;

export const $CaseCriteria = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/CaseCriterion'
    }
} as const;

export const $CaseActivityLogs = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ActivityType: {
            type: 'string',
            enum: ['LOGIN', 'LOGOUT', 'CLIENT_UPDATE_PROFILE_SELF', 'CLIENT_CREATE_FAMILY_MEMBER', 'CLIENT_UPDATE_FAMILY_MEMBER', 'CLIENT_DELETE_FAMILY_MEMBERS', 'CLIENT_GET_FAMILY_MEMBER_BY_ID', 'CLIENT_GET_ALL_USER_FAMILY_MEMBERS', 'CLIENT_UPLOAD_DOCUMENT_SELF', 'CLIENT_UPDATE_DOCUMENT_SELF', 'CLIENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DOWNLOAD_DOCUMENT_SELF', 'CLIENT_DOWNLOAD_DOCUMENT_FAMILY_MEMBER', 'CLIENT_DELETE_DOCUMENT_SELF', 'CLIENT_DELETE_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_CRITERION', 'AGENT_UPDATE_PROFILE_SELF', 'AGENT_UPLOAD_DOCUMENT_CLIENT', 'AGENT_UPLOAD_DOCUMENT_FAMILY_MEMBER', 'AGENT_UPDATE_DOCUMENT_CLIENT', 'AGENT_UPDATE_DOCUMENT_FAMILY_MEMBER', 'AGENT_GET_ALL_USER_CASES', 'AGENT_APPROVE_DOCUMENT_CHECKLIST', 'AGENT_REMOVE_CASE_WORKFLOW_CRITERIA', 'AGENT_ADD_CASE_FILE_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_CLIENT', 'AGENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'AGENT_ADD_NEW_CASE_NOTE', 'AGENT_REPLY_TO_CASE_NOTE', 'AGENT_CLOSE_CASE', 'AGENT_UNDER_REVIEW_CASE_FILE_CLIENT', 'AGENT_REMOVE_CASE_NOTE', 'AGENT_ACTIVATE_CASE', 'AGENT_DOWNLOAD_CASE_FILE_CLIENT', 'AGENT_DOWNLOAD_ALL_CASE_FILES', 'AGENT_APPROVE_CASE_FILE_CLIENT', 'AGENT_REJECT_CASE_FILE_CLIENT', 'AGENT_VIEW_CASE_NOTES', 'AGENT_PENDING_CASE_FILE_CLIENT', 'AGENT_EDIT_CASE_NOTE', 'AGENT_UPDATE_CASE_FILE_CLIENT', 'AGENT_PREVIEW_CASE_FILE', 'AGENT_GET_CASE_FILE_LISTING', 'CLIENT_CREATE_CASE', 'CLIENT_DELETE_CASE', 'CLIENT_UPDATE_CASE', 'CLIENT_GET_CASE_BY_ID', 'CLIENT_ADD_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FAMILY_MEMBERS', 'CLIENT_REMOVE_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FILE_LIST', 'CLIENT_ADD_CASE_FILES_SELF', 'CLIENT_RESUBMIT_CASE_FILES_SELF', 'CLIENT_VIEW_CASE_FAMILY_MEMBERS', 'CLIENT_VIEW_CASE_TEAM_MEMBERS', 'CLIENT_GET_CASE_FAMILY_MEMBERS', 'CLIENT_UPDATE_CASE_FILE_SELF', 'CLIENT_ADD_CASE_FILES_FAMILY_MEMBER', 'CLIENT_REMOVE_CASE_FILES_FAMILY_MEMBER', 'CLIENT_RESUBMIT_CASE_FILES_FAMILY_MEMBER', 'CLIENT_UPDATE_CASE_FILE_FAMILY_MEMBER', 'AGENT_APPROVE_CASE_FILE_FAMILY_MEMBER', 'AGENT_PENDING_CASE_FILE_FAMILY_MEMBER', 'AGENT_REJECT_CASE_FILE_FAMILY_MEMBER', 'AGENT_ADD_CASE_FILES_FAMILY_MEMBER', 'AGENT_DOWNLOAD_CASE_FILE_FAMILY_MEMBER', 'AGENT_UNDER_REVIEW_CASE_FILE_FAMILY_MEMBER', 'AGENT_UPDATE_CASE_FILE_FAMILY_MEMBER']
        },
        ActivityValue: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        CaseId: {
            type: 'string'
        },
        ActivityAcknowledgedByUserId: {
            type: 'string'
        },
        ActivityAcknowledgedBy: {
            '$ref': '#/components/schemas/UserBase'
        },
        Case: {
            '$ref': '#/components/schemas/BaseCase'
        },
        User: {
            '$ref': '#/components/schemas/UserBase'
        },
        RelatedEntity: {
            type: 'string',
            enum: ['CASE', 'USER_CASE', 'CASE_FILE', 'FAMILY_MEMBER', 'CASE_APPLICANT', 'USER_FILE', 'CASE_FAMILY_MEMBER']
        },
        ActivityGeneratedByUserId: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['id', 'ActivityType', 'ActivityValue', 'RelatedEntity'],
    additionalProperties: false
} as const;

export const $GetUserActivityResponse = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseActivityLogs'
            }
        },
        total: {
            type: 'number',
            format: 'float'
        },
        take: {
            type: 'number',
            format: 'float'
        },
        skip: {
            type: 'number',
            format: 'float'
        },
        totalPages: {
            type: 'number',
            format: 'float'
        }
    },
    additionalProperties: false
} as const;

export const $MarkCaseActivityAsRead = {
    type: 'object',
    properties: {
        caseId: {
            type: 'string',
            format: 'uuid'
        },
        caseActivityLogId: {
            type: 'string',
            format: 'uuid'
        },
        readStatus: {
            type: 'boolean'
        }
    },
    required: ['caseId', 'caseActivityLogId', 'readStatus'],
    additionalProperties: false
} as const;