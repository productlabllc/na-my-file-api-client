// This file is auto-generated by @hey-api/openapi-ts


export const $Language = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string'
        },
        Code: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'Name', 'Code', 'CreatedAt'],
    additionalProperties: false
} as const;

export const $AddCaseFileRequest = {
    type: 'object',
    properties: {
        UserFileIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    required: ['UserFileIds'],
    additionalProperties: false
} as const;

export const $DeleteCaseFileRequest = {
    type: 'object',
    properties: {
        UserFileIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    required: ['UserFileIds'],
    additionalProperties: false
} as const;

export const $UpdateCaseFileRequest = {
    type: 'object',
    properties: {
        Status: {
            type: 'string'
        }
    },
    required: ['Status'],
    additionalProperties: false
} as const;

export const $UserFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        LegacyId: {
            type: 'string'
        },
        ContentType: {
            type: 'string'
        },
        ActiveVersionId: {
            type: 'string',
            format: 'uuid'
        },
        OriginalFilename: {
            type: 'string'
        },
        Title: {
            type: 'string'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        OwnerUserId: {
            type: 'string'
        },
        UploadedMediaAssetVersions: {
            type: 'array',
            items: {
                type: 'object',
                properties: {},
                additionalProperties: false
            }
        },
        UploadUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        CreatedByUserId: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string',
            format: 'email'
        },
        UploadUrl: {
            type: 'string'
        }
    },
    required: ['ContentType', 'OriginalFilename', 'Title'],
    additionalProperties: false
} as const;

export const $GetUserFilesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/UserFile'
    }
} as const;

export const $CreateUserFileRequest = {
    type: 'object',
    properties: {
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        Title: {
            type: 'string'
        },
        Files: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    ContentType: {
                        type: 'string'
                    },
                    OriginalFilename: {
                        type: 'string'
                    },
                    SizeInBytes: {
                        type: 'number',
                        format: 'float'
                    },
                    PageNumber: {
                        type: 'number',
                        format: 'float'
                    }
                },
                required: ['ContentType', 'OriginalFilename', 'SizeInBytes', 'PageNumber'],
                additionalProperties: false
            }
        }
    },
    required: ['Title', 'Files'],
    additionalProperties: false
} as const;

export const $UpdateFamilyMemberRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        LastName: {
            type: 'string'
        },
        Dob: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $User = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $CaseApplicant = {
    type: 'object',
    properties: {
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMember: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        Case: {
            type: 'object',
            properties: {},
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $UpdateFamilyMemberResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/User'
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $DeleteUserFileRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UserFileDownloadResponse = {
    type: 'object',
    properties: {
        downloadUrl: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $CaseAttributes = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            name: {
                type: 'string'
            },
            value: {
                type: 'string'
            }
        },
        required: ['name', 'value'],
        additionalProperties: false
    }
} as const;

export const $CaseCriterion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        Status: {
            type: 'string'
        },
        LastModifiedByUserId: {
            type: 'string'
        },
        CaseId: {
            type: 'string'
        },
        UserId: {
            type: 'string'
        },
        WorkflowStageCriterionId: {
            type: 'string'
        },
        LastModifiedByUser: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        Case: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        WorkflowStageCriterion: {
            type: 'object',
            properties: {},
            additionalProperties: false
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseNote = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        NoteText: {
            type: 'string'
        },
        ParentNoteId: {
            type: 'string'
        },
        AuthorUserId: {
            type: 'string',
            format: 'uuid'
        },
        NoteAudienceScope: {
            type: 'string'
        },
        AuthorUser: {
            '$ref': '#/components/schemas/User'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        CaseNoteReplies: {
            type: 'array',
            items: {
                type: 'object',
                properties: {},
                additionalProperties: false
            }
        },
        CaseNote: {
            type: 'object',
            properties: {},
            additionalProperties: false
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseTeamAssignment = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        CaseRole: {
            type: 'string'
        },
        Case: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        User: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $CaseFile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        UserFileId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedByUserId: {
            type: 'string',
            format: 'uuid'
        },
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        Case: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        UserFile: {
            '$ref': '#/components/schemas/UserFile'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $Case = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetUserFileCasesResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Case'
    }
} as const;

export const $UpdateGeneratedFileRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateGeneratedFileResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ContentType: {
            type: 'string'
        },
        OriginalFilename: {
            type: 'string'
        },
        Status: {
            type: 'string'
        },
        SizeInBytes: {
            type: 'number',
            format: 'float'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        LastModifiedAt: {
            type: 'string',
            format: 'date-time'
        },
        Title: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $AddWorkFlowRequest = {
    type: 'object',
    properties: {
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['WorkflowId'],
    additionalProperties: false
} as const;

export const $AddWorkFlowResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $DeleteWorkFlowRequest = {
    type: 'object',
    properties: {
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['WorkflowId'],
    additionalProperties: false
} as const;

export const $DeleteWorkFlowResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $WorkflowStageCriterion = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseWorkflowStageId: {
            type: 'string',
            format: 'uuid'
        },
        Name: {
            type: 'string'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                type: 'object',
                properties: {},
                additionalProperties: false
            }
        },
        CriterionFulfillmentType: {
            type: 'string'
        },
        WorkflowStage: {
            type: 'object',
            properties: {},
            additionalProperties: false
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $WorkflowStage = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        StageName: {
            type: 'string'
        },
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        },
        Workflow: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        WorkflowStateCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WorkflowStageCriterion'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $Workflow = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        WorkflowStages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WorkflowStage'
            }
        },
        Name: {
            type: 'string'
        },
        Description: {
            type: 'string'
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetUserWorkFlowsResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Workflow'
    }
} as const;

export const $CreateFamilyMemberRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        }
    },
    required: ['FirstName', 'LastName', 'DOB', 'Relationship'],
    additionalProperties: false
} as const;

export const $CreateFamilyMemberResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/User'
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $DeleteFamilyMemberRequest = {
    type: 'array',
    items: {
        type: 'string',
        format: 'uuid'
    }
} as const;

export const $FamilyMember = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        UserId: {
            type: 'string',
            format: 'uuid'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        Relationship: {
            type: 'string'
        },
        User: {
            '$ref': '#/components/schemas/User'
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        },
        UserFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserFile'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $DeleteFamilyMemberResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/FamilyMember'
    }
} as const;

export const $AddCaseFamilyMembersRequest = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            UserFamilyMemberId: {
                type: 'string',
                format: 'uuid'
            }
        },
        required: ['UserFamilyMemberId'],
        additionalProperties: false
    }
} as const;

export const $AddCaseApplicantsResponse = {
    type: 'object',
    properties: {
        CaseId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMemberId: {
            type: 'string',
            format: 'uuid'
        },
        UserFamilyMember: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        Case: {
            type: 'object',
            properties: {},
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $DeleteCaseFamilyMembersRequest = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            UserFamilyMemberId: {
                type: 'string',
                format: 'uuid'
            }
        },
        required: ['UserFamilyMemberId'],
        additionalProperties: false
    }
} as const;

export const $CreateCaseRequestBody = {
    type: 'object',
    properties: {
        CaseTitle: {
            type: 'string'
        },
        CaseType: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseIdentifier: {
            type: 'string'
        },
        FamilyMemberIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        WorkflowId: {
            type: 'string',
            format: 'uuid'
        }
    },
    required: ['CaseType', 'CaseIdentifier', 'WorkflowId'],
    additionalProperties: false
} as const;

export const $CreateCaseResponse = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $UpdateCaseRequestBody = {
    type: 'object',
    properties: {
        CaseTitle: {
            type: 'string'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        Status: {
            type: 'string'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UpdateCaseResponse = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetCaseResponse = {
    type: 'object',
    properties: {
        Title: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        CaseType: {
            type: 'string'
        },
        PercentComplete: {
            type: 'number',
            format: 'float'
        },
        AgencyCaseIdentifier: {
            type: 'string'
        },
        CaseAttributes: {
            '$ref': '#/components/schemas/CaseAttributes'
        },
        CaseCriteria: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseCriterion'
            }
        },
        CaseNotes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseNote'
            }
        },
        CaseTeamAssignments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseTeamAssignment'
            }
        },
        CaseFiles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseFile'
            }
        },
        CaseApplicants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CaseApplicant'
            }
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $getCaseResponse = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Case'
    }
} as const;

export const $CreateUserRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LanguageId: {
            type: 'string',
            format: 'uuid'
        },
        Workflows: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    required: ['FirstName', 'LastName', 'Email', 'DOB', 'LanguageId'],
    additionalProperties: false
} as const;

export const $CreateUserResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UpdateUserRequest = {
    type: 'object',
    properties: {
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        DOB: {
            type: 'string',
            format: 'date-time'
        },
        LanguageId: {
            type: 'string',
            format: 'uuid'
        },
        TOSAcceptedAt: {
            type: 'string',
            format: 'date-time'
        },
        PPAcceptedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $UpdateUserResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        FirstName: {
            type: 'string'
        },
        LastName: {
            type: 'string'
        },
        Email: {
            type: 'string',
            format: 'email'
        },
        LegacyId: {
            type: 'string'
        },
        IdpId: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $PlatformActivityLogs = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        ActivityType: {
            type: 'string'
        },
        ActivityValue: {
            type: 'string'
        },
        RelatedId: {
            type: 'string',
            format: 'uuid'
        },
        CreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        ActivityGeneratedByUserId: {
            type: 'string',
            format: 'uuid'
        },
        Metadata: {
            type: 'object',
            properties: {},
            additionalProperties: false
        },
        User: {
            type: 'object',
            properties: {},
            additionalProperties: false
        }
    },
    required: ['id'],
    additionalProperties: false
} as const;

export const $GetUserActivityResponse = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PlatformActivityLogs'
            }
        },
        total: {
            type: 'number',
            format: 'float'
        },
        page: {
            type: 'number',
            format: 'float'
        },
        limit: {
            type: 'number',
            format: 'float'
        }
    },
    additionalProperties: false
} as const;